// Interaction Calculus of Constructions
// =====================================

// Interactions
// ------------

// Applications
(APP (Lam fun.bod) arg) = (fun.bod arg)
(APP (Bri fun.bod) arg) = (Bri λx(APP (fun.bod (Lam λ$k(x))) (ANN $k arg)))
(APP fun           arg) = (App fun arg)

// Annotations
(ANN (Ann val ty0) ty1) = (ANN val (EQL ty0 ty1))
(ANN val (Lam typ.bod)) = (Lam λx(ANN (APP val $k) (typ.bod (Bri λ$k(x)))))
(ANN val (Bri typ.bod)) = (typ.bod val)
(ANN val typ)           = (Ann val typ)

// Equality
(EQL (Lam a.bod)       snd)               = (Lam λx(EQL (a.bod x) (APP snd x)))
(EQL fst               (Lam b.bod))       = (Lam λx(EQL (APP fst x) (b.bod x)))
(EQL (Bri a.bod)       snd)               = (Bri λx(EQL (a.bod x) (ANN x snd)))
(EQL fst               (Bri b.bod))       = (Bri λx(EQL (ANN x fst) (b.bod x)))
(EQL (App a.fun a.arg) (App b.fun b.arg)) = (APP (EQL a.fun b.fun) (EQL a.arg b.arg))
(EQL (Ann a.val a.typ) b)                 = (EQL a.val b)
(EQL a                 (Ann b.val v.typ)) = (EQL a b.val)
(EQL (Var a.idx)       (Var b.idx))       = (If (== a.idx b.idx) (Var a.idx) (Eql (Var a.idx) (Var b.idx)))
(EQL fst               snd)               = (Eql fst snd)

// Checking
// --------

(Check (Lam bod)     dep) = (Check (bod (Var dep)) (+ dep 1))
(Check (App fun arg) dep) = (& (Check fun dep) (Check arg dep))
(Check (Bri bod)     dep) = (Check (bod (Var dep)) (+ dep 1))
(Check (Ann val typ) dep) = (& (Check val dep) (Check typ dep)) 
(Check (Eql fst snd) dep) = (Debug ["Mismatch " (Show fst dep) NewLine "      != " (Show snd dep)] 0)
(Check (Var idx)     dep) = 1

// Stringification
// ---------------

(Show (Lam term.bod)          dep) = (Join ["λx" (U60.show dep) " " (Show (term.bod (Var dep)) (+ dep 1))])
(Show (App term.fun term.arg) dep) = (Join ["(" (Show term.fun dep) " " (Show term.arg dep) ")"])
(Show (Bri term.bod)          dep) = (Join ["θx" (U60.show dep) " " (Show (term.bod (Var dep)) (+ dep 1))])
(Show (Ann term.val term.typ) dep) = (Join ["{" (Show term.val dep) " : " (Show term.typ dep) "}"])
(Show (Eql term.fst term.snd) dep) = (Join ["{" (Show term.fst dep) " = " (Show term.snd dep) "}"])
(Show (Var term.idx)          dep) = (Join ["x" (U60.show term.idx)])

// Utils
// -----

(If 0 t f)                   = f
(If 1 t f)                   = t
(Conc String.nil         ys) = ys
(Conc (String.cons x xs) ys) = (String.cons x (Conc xs ys))
(Join List.nil)              = ""
(Join (List.cons x xs))      = (Conc x (Join xs))
(NewLine)                    = (String.cons 10 String.nil)
(U60.show n)                 = (U60.show.go n String.nil)
(U60.show.go n res)          = (U60.show.go.match (< n 10) n res)
(U60.show.go.match 0 n res)  = (U60.show.go (/ n 10) (String.cons (+ '0' (% n 10)) res))
(U60.show.go.match i n res)  = (String.cons (+ '0' n) res)
(Debug []  value)            = value
(Debug msg value)            = (HVM.print (Join msg) value)
