// Interaction Calculus of Constructions
// =====================================

// Utils
// -----

(Debug dep []  value) = (If (> dep 64) 1 value)
(Debug dep msg value) = (If (> dep 64) 1 (HVM.print (Join msg) value))
//(DEbug dep msg value) = value 

(If 0 t f)                   = f
(If 1 t f)                   = t
(Conc String.nil         ys) = ys
(Conc (String.cons x xs) ys) = (String.cons x (Conc xs ys))
(Join List.nil)              = ""
(Join (List.cons x xs))      = (Conc x (Join xs))
(U60.show n)                 = (U60.show.go n String.nil)
(U60.show.go n res)          = (U60.show.go.match (< n 10) n res)
(U60.show.go.match 0 n res)  = (U60.show.go (/ n 10) (String.cons (+ '0' (% n 10)) res))
(U60.show.go.match i n res)  = (String.cons (+ '0' n) res)

// Interactions
// ------------

(APP (Lam   fun.bod) arg) = (fun.bod arg)
(APP (Bri   fun.bod) arg) = (Bri λx(APP (fun.bod (Lam λ$k(x))) (ANN $k arg)))
(APP (Ref _ fun.val) arg) = (APP fun.val arg)
(APP fun             arg) = (App fun arg)

(ANN val (Lam   typ.bod)) = (Lam λx(ANN (APP val $k) (typ.bod (Bri λ$k(x)))))
(ANN val (Bri   typ.bod)) = (typ.bod val)
(ANN val (Ref _ typ.val)) = (ANN val typ.val)
(ANN val typ)             = (Ann val typ)

(REF (Ref a.nam a.val))   = a.val
(REF term)                = term

// Equality
// --------

(Equal a b dep) = (Debug dep ["Equal: " (Join [(Show a dep) " == " (Show b dep)])] (Equals a b dep))

(Equals (Ref a.nam a.val) b                 dep) = (Equal a.val b dep)
(Equals a                 (Ref b.nam b.val) dep) = (Equal a b.val dep)
(Equals (Ann a.val a.typ) b                 dep) = (Equal a.val b dep)
(Equals a                 (Ann b.val b.typ) dep) = (Equal a b.val dep)
(Equals (Lam a.bod)       (Lam b.bod)       dep) = (Equal (a.bod (Var dep)) (b.bod (Var dep)) (+ dep 1))
(Equals (Bri a.bod)       (Bri b.bod)       dep) = (Equal (a.bod (Var dep)) (b.bod (Var dep)) (+ dep 1))
(Equals (App a.fun a.arg) (App b.fun b.arg) dep) = (& (Equal a.fun b.fun dep) (Equal a.arg b.arg dep))
(Equals (Var a.idx)       (Var b.idx)       dep) = (== a.idx b.idx)
(Equals (Lam a.bod)       b                 dep) = (Equals (Lam a.bod) (Lam λx(App b x)) dep)
(Equals a                 (Lam b.bod)       dep) = (Equals (Lam λx(App a x)) (Lam b.bod) dep)
(Equals a                 b                 dep) = 0

// Checking
// --------

(Check term dep) = (Debug dep ["Check: " (Show term dep)] (Checks term dep))

(Checks (Ref nam val)             dep) = 1
(Checks (Lam bod)                 dep) = (Check (bod (Var dep)) (+ dep 1))
(Checks (App (Ann v t) arg)       dep) = 0
(Checks (App fun arg)             dep) = (& (Check fun dep) (Check arg dep))
(Checks (Bri bod)                 dep) = (Check (bod (Var dep)) (+ dep 1))
(Checks (Ann (Ann val ty0) ty1)   dep) = (& (Equal ty0 ty1 dep) (Check val dep))
(Checks (Ann (Lam bod) typ)       dep) = 0
(Checks (Ann val typ)             dep) = (Check val dep)
(Checks (Var idx)                 dep) = 1

// Stringification
// ---------------

(Show term dep) = (Debug dep [] (Shows term dep))

(Shows (Ref term.nam term.val) dep) = term.nam
(Shows (Lam term.bod)          dep) = (Join ["λx" (U60.show dep) " " (Show (term.bod (Var dep)) (+ dep 1))])
(Shows (App term.fun term.arg) dep) = (Join ["(" (Show term.fun dep) " " (Show term.arg dep) ")"])
(Shows (Bri term.bod)          dep) = (Join ["θx" (U60.show dep) " " (Show (term.bod (Var dep)) (+ dep 1))])
(Shows (Ann term.val term.typ) dep) = (Join ["{" (Show term.val dep) " : " (Show term.typ dep) "}"])
(Shows (Var term.idx)          dep) = (Join ["x" (U60.show term.idx)])
