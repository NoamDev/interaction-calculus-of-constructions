// Interaction Calculus of Constructions
// =====================================

// Type
// ----

data Term
  = (Lam bod)
  | (App fun arg)
  | (Bri bod)
  | (Ann val typ)
  | (Var idx)
  | (Ref uid exp)

// Interactions
// ------------

(APP fun arg) = match fun = (Reduce fun) {
  Lam: (Reduce (fun.bod arg))
  Bri: (Bri λx(App (fun.bod (Lam λ$k(x))) (Ann $k arg)))
  Ref: (APP fun.exp arg)
  exp: (App exp arg)
}

(ANN val typ) = match typ = (Reduce typ) {
  Lam: (Lam λx(Ann (App val $k) (typ.bod (Bri λ$k(x)))))
  Bri: (Reduce (typ.bod val))
  Ref: (ANN val typ.exp)
  exp: (Ann val exp)
}

// Evaluation
// ----------

(Reduce term) = match term {
  App: (APP term.fun term.arg)
  Ann: (ANN term.val term.typ)
  val: val
}

(Expand term) = match term = (Reduce term) {
  Ref: (Expand term.exp)
  val: val
}

(Normal term dep) = match term = (Reduce term) {
  Lam: (Lam λx(Normal (term.bod (Var dep)) (+ dep 1)))
  App: (App (Normal term.fun dep) (Normal term.arg dep))
  Bri: (Bri λx(Normal (term.bod (Var dep)) (+ dep 1)))
  Ann: (Ann (Normal term.val dep) (Normal term.typ dep))
  Ref: (Ref term.uid term.exp dep)
  Var: (Var term.idx)
}

// Equality
// --------

// This linear equality attempts to avoid reducing the term to normal form, and
// cloning it, while still being able to identify as many terms as possible.

(Equal a b dep) = match a {
  Lam: match b {
    Lam: (Equal (a.bod (Var dep)) (b.bod (Var dep)) (+ 1 dep))
    Ann: (Equal (Lam a.bod) b.val dep)
    Ref: (Equal (Lam a.bod) b.exp dep)
    App: (Equal (App b.fun b.arg) (Lam a.bod) dep)
    exp: 0
  }
  App: match a = (APP a.fun a.arg) {
    App: match b {
      App: (& (Equal a.fun b.fun dep) (Equal a.arg b.arg dep))
      Ann: (Equal (App a.fun a.arg) b.val dep)
      Ref: (Equal (App a.fun a.arg) b.exp dep)
      exp: 0
    }
    exp: (Equal exp b dep)
  }
  Bri: match b {
    Bri: (Equal (a.bod (Var dep)) (b.bod (Var dep)) (+ 1 dep))
    Ann: (Equal (Bri a.bod) b.val dep)
    Ref: (Equal (Bri a.bod) b.exp dep)
    App: (Equal (App b.fun b.arg) (Bri a.bod) dep)
    exp: 0
  }
  Ann: (Equal a.val b dep)
  Ref: match b {
    Ref: (== a.uid b.uid)
    Ann: (Equal (Ref a.uid a.exp) b.val dep)
    App: (Equal (App b.fun b.arg) (Ref a.uid a.exp) dep)
    exp: (Equal a.exp exp dep)
  }
  Var: match b {
    Var: (== a.idx b.idx)
    Ann: (Equal (Var a.idx) b.val dep)
    Ref: (Equal (Var a.idx) b.exp dep)
    App: (Equal (App b.fun b.arg) (Var a.idx) dep)
    exp: 0
  }
}

// Checking
// --------

data Maybe
  = None
  | (Some value)

(Valid term dep) = 
  (bind (log (Join ["Valid: " (U60.show dep) " " (Show term dep)])) λx
  match term {
    Lam: (Valid (term.bod (Var dep)) (+ 1 dep))
    App: match term = (APP term.fun term.arg) {
      App: (bind (Valid term.fun dep) λfun (bind (Valid term.arg dep) λarg (pure (& fun arg))))
      exp: (Valid exp dep)
    }
    Bri: (Valid (term.bod (Var dep)) (+ 1 dep))
    Ann: (Check term.val term.typ dep)
    Ref: (pure 1)
    Var: (pure 1)
  })

(Check term type dep) =
  (bind (log (Join ["Check: " (U60.show dep) " " (Show (Reduce term) dep) " :: " (Show (Reduce type) dep)])) λx
  match type = (Reduce type) {
    Bri: (Valid (type.bod term) dep)
    Ann: (bind (Valid type.typ dep) λtyp (bind (Check term type.val dep) λval (pure (& typ val))))
    typ: match term = (Reduce term) {
      Ann: match (Equal typ term.typ dep) {
        0: (bind (log (Join ["Error: " (Show typ dep) " != " (Show term.typ dep)])) λx(pure 0))
        +: (Valid term.val dep)
      }
      //Lam: (bind (log (Join ["NotFn: " (Show (Lam term.bod) dep)])) λx(pure 0))
      //App: (bind (log (Join ["NotFn: " (Show (Ann (App term.fun term.arg) typ) dep)])) λx(pure 0))
      exp: (Valid exp dep)
    }
  })

(Chk term) = match term {
  Ann: let (logs, result) = (run (Check term.val (Expand term.typ) 0)); [logs, result]
  Ref: (Chk term.exp)
  exp: "untyped"
}

(Run term) = match term {
  Ann: (Run term.val)
  Ref: (Run term.exp)
  exp: (Show (Normal term 0) 0)
}

// Stringification
// ---------------

(Concat SNil         ys) = ys
(Concat (SCons x xs) ys) = (SCons x (Concat xs ys))

(Join LNil)         = ""
(Join (LCons x xs)) = (Concat x (Join xs))

(U60.show n) = (U60.show.go n SNil)
(U60.show.go n res) = match k = (< n 10) {
  0: (U60.show.go (/ n 10) (SCons (+ '0' (% n 10)) res))
  +: (SCons (+ '0' n) res)
}

(Show term dep) = match term {
  Lam: (Join ["λx" (U60.show dep) " " (Show (term.bod (Var dep)) (+ dep 1))])
  App: (Join ["(" (Show term.fun dep) " " (Show term.arg dep) ")"])
  Bri: (Join ["θx" (U60.show dep) " " (Show (term.bod (Var dep)) (+ dep 1))])
  Ann: (Join ["{" (Show term.val dep) " : " (Show term.typ dep) "}"])
  Var: match (== term.idx (- 0 1)) { 0: (Join ["x" (U60.show term.idx)]); +: "*" }
  Ref: (NameOf term.uid)
}

// Logger
// -------

//Logger r = ∀(logs: [String]) ([String], r)
(pure x)   = λlogs (logs, x)
(bind a b) = λlogs let (a_logs, a_result) = (a logs); (b a_result a_logs)
(log msg)  = λlogs ((LCons msg logs), 0)
(run a)    = (a [])

// Utils
// -----

(NameOf uid) = (Get uid Names)

(Get n list) = match n {
  0: match list { LNil: 0; LCons: list.head }
  +: match list { LNil: 0; LCons: (Get n-1 list.tail) }
}
